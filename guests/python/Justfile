PYTHON_VERSION_MAJOR := "3"
PYTHON_VERSION_MINOR := "14"
PYTHON_VERSION_MICRO := "0rc2"

WASI_SDK_VERSION_MAJOR := "24"
WASI_SDK_VERSION_MINOR := "0"

SHA256_PYTHON_SDK := "be233d6baf6a770550634fd6f51e12f15c1837455105c7e8b2a45efd3926805d"
SHA256_PYTHON_SDK_BUILD := "d5240fdf3e2aedd5dcea9f60244060b2b6a7c4365066e2060402fd8f36fce229"
SHA256_WASI_SDK_SYSROOT := "35172f7d2799485b15a46b1d87f50a585d915ec662080f005d99153a50888f08"

PYTHON_VERSION_FULL := PYTHON_VERSION_MAJOR + "." + PYTHON_VERSION_MINOR + "." + PYTHON_VERSION_MICRO

DOWNLOADS_DIR := source_directory() / "downloads"

export PYO3_CROSS_PYTHON_VERSION := PYTHON_VERSION_MAJOR + "." + PYTHON_VERSION_MINOR
export PYO3_CROSS_LIB_DIR := DOWNLOADS_DIR / "python-sdk"

export WASI_SDK_LINK_PATH := DOWNLOADS_DIR / "wasi-sysroot" / "lib" / "wasm32-wasip2"

# download pre-built Python WASM SDK
[private]
download-python-sdk:
    #!/usr/bin/env bash
    set -euo pipefail

    echo ::group::guests::python::download-python-sdk
    set -x

    mkdir -p downloads
    pushd downloads >/dev/null

    # skip if already downloaded
    if [ -d python-sdk ]; then
        echo "python sdk already present"
        exit 0
    fi

    curl \
        --fail \
        --show-error \
        --silent \
        --proto '=https' \
        --tlsv1.2 \
        --location \
        --output "python-sdk.zip" \
        "https://github.com/crepererum/cpython-wasi-build/releases/download/v{{PYTHON_VERSION_FULL}}/python-{{PYTHON_VERSION_FULL}}-wasi_sdk-{{WASI_SDK_VERSION_MAJOR}}.zip"

    curl \
        --fail \
        --show-error \
        --silent \
        --proto '=https' \
        --tlsv1.2 \
        --location \
        --output "build-python-sdk.zip" \
        "https://github.com/crepererum/cpython-wasi-build/releases/download/v{{PYTHON_VERSION_FULL}}/_build-python-{{PYTHON_VERSION_FULL}}-wasi_sdk-{{WASI_SDK_VERSION_MAJOR}}.zip"

    echo "{{SHA256_PYTHON_SDK}} python-sdk.zip" | sha256sum -c
    echo "{{SHA256_PYTHON_SDK_BUILD}} build-python-sdk.zip" | sha256sum -c

    unzip -d python-sdk python-sdk.zip
    unzip -d build-python-sdk build-python-sdk.zip

    mv build-python-sdk/libpython{{PYTHON_VERSION_MAJOR}}.{{PYTHON_VERSION_MINOR}}.a python-sdk/
    mv build-python-sdk/Modules/_decimal/libmpdec/libmpdec.a python-sdk/
    mv build-python-sdk/Modules/_hacl/libHacl_HMAC.a python-sdk/
    mv build-python-sdk/Modules/_hacl/libHacl_Hash_BLAKE2.a python-sdk/
    mv build-python-sdk/Modules/_hacl/libHacl_Hash_MD5.a python-sdk/
    mv build-python-sdk/Modules/_hacl/libHacl_Hash_SHA1.a python-sdk/
    mv build-python-sdk/Modules/_hacl/libHacl_Hash_SHA2.a python-sdk/
    mv build-python-sdk/Modules/_hacl/libHacl_Hash_SHA3.a python-sdk/
    mv build-python-sdk/Modules/expat/libexpat.a python-sdk/

    set +x
    echo ::endgroup::

# download WASI SDK because we need some libraries during the static linking phase
[private]
download-wasi-sdk:
    #!/usr/bin/env bash
    set -euo pipefail

    echo ::group::guests::python::download-wasi-sdk
    set -x

    mkdir -p downloads
    pushd downloads >/dev/null

    # skip if already downloaded
    if [ -d wasi-sysroot ]; then
        echo "wasi sdk already present"
        exit 0
    fi

    curl \
        --fail \
        --show-error \
        --silent \
        --proto '=https' \
        --tlsv1.2 \
        --location \
        --output "wasi-sysroot.tar.gz" \
        "https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-{{WASI_SDK_VERSION_MAJOR}}/wasi-sysroot-{{WASI_SDK_VERSION_MAJOR}}.{{WASI_SDK_VERSION_MINOR}}.tar.gz"

    echo "{{SHA256_WASI_SDK_SYSROOT}} wasi-sysroot.tar.gz" | sha256sum -c
    tar xf wasi-sysroot.tar.gz
    mv wasi-sysroot-{{WASI_SDK_VERSION_MAJOR}}.{{WASI_SDK_VERSION_MINOR}} wasi-sysroot

    set +x
    echo ::endgroup::

[private]
build-lib profile: download-python-sdk download-wasi-sdk
    @echo ::group::guests::python::build-lib {{profile}}
    cargo build --target=wasm32-wasip2 --profile={{replace(profile, "debug", "dev")}}
    @echo ::endgroup::

# top-level entry point
[private]
do profile: (build-lib profile)

# create dev/debug build
debug: (do "debug")

# create release build
release: (do "release")

# checks build
check-build: debug

# clean build artifacts
clean:
    @echo ::group::guests::python::clean
    rm -rf {{DOWNLOADS_DIR}}
    @echo ::endgroup::
